)
print(chart2)
#Chart 3 - Total Number of Fires Per Year Per County
total_num_fires <- fires %>%
group_by(ArchiveYear, Counties) %>%
summarize(total_num_per_year = n())
chart3 <- ggplot(data=total_num_fires) +
geom_col(mapping = aes(x=ArchiveYear, y=total_num_per_year,
fill = Counties)) +
labs(
title = "Total Number of Fires Each Year (2013-2018)",
x = "Year",
y = "Number of Fires"
)
print(chart3)
server <- function(input, output) {
output$fires_per_month <- renderPlotly({
fires_per_month_updated <- fires_per_month %>%
filter(ArchiveYear == input$fires_year_id)
chart1 <- ggplot(data = fires_per_month_updated) +
geom_col(mapping = aes(x = Month, y = num_fires_per_month),
fill = input$color_id) +
labs(title = "Number of Fires Per Month Each Year (2013-2018)",
x = "Month", y = "Number of Fires")
})
output$avg_acres_burned <- renderPlotly ({
avg_acres_burned_updated <- avg_acres_burned %>%
filter(Counties == input$county_id)
chart2 <- ggplot(data = avg_acres_burned_updated) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres),
color = input$color_id2) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres")
})
output$total_num_fires<- renderPlotly ({
total_num_fires_updated <- total_num_fires %>%
filter(ArchiveYear == input$num_fires_year_id())
chart3 <- ggplot(data = total_num_fires_updated) +
geom_col(mapping = aes(x = ArchiveYear, y = total_num_per_year),
fill = input$color_id3) +
labs(
title = "Total Number of Fires Each Year (2013-2018)",
x = "Year",
y = "Number of Fires"
)
})
}
Introduction <- tabPanel(
"Introduction",
mainPanel(
h1("Overview of our project"),
p("Welcome to my assignment 4! For my assignment, I have chosen to track the variables of greenhouse gases,
coal, and CO2 using a data set compiled by Our World in Data (link below). Through working with
the data, I have looked to find relevant values and trends within the data that will allow me
to put together a greater picture about climate change over time, and how differnet countries
(my work focuses on the USA), has impacted climate change throughout history."),
p(a("Our World in Data", href = "https://ourworldindata.org/co2-and-other-greenhouse-gas-emissions")),
p(strong("Below are 5 relevant data points about climate change that I calculated
using the raw data compiled by Our World in Data:")),
p("The difference between the USA CO2 emissions from coal in the years 2000 and 2010 was 159.117 million tonnes"),
p("The year where the USA's share of global CO2 emissions was the greatest was in 2000"),
p("In the most recent documented year for this metric (2014), the USA's greenhouse gas
emissions per capita was 19.135 tonnes"),
p("After charging the USA's greenhouse gas emissions each year, I found that the greatest emissions
came in 2007, at 6601.13 million tonnes of carbon dioxide equivalents."),
p("In 1990, the United States had the greatest cumulative share of global CO2 emissions at 30.716% of global emissions.
This emissions number was also the greatest cumulative share of global CO2 emissions within the entire datset.")
))
#Chart 1 Page
ChartPage1 <- tabPanel(
"Visual Chart 1",
sidebarLayout(
sidebarPanel(
p("Select your viewing options!"),
selectInput("fires_year_id",
label = h3("Year"),
choices = fires$ArchiveYear,
selected = "2013"
),
selectInput("color_id",
label = h3("Color"),
choices = brewer.pal(8, "Set2")
)
),
mainPanel(
h2("Finding the number of fires occurring each month in each year"),
p("Below is my interactive visualization showing the total greenhouse gas emissions for each country"),
plotlyOutput(outputId = "fires_per_month"),
p("The reason why I chose to include this chart was to provide an individualized snapshot of each country's
greenhouse gas emissions. Compared to the large data chart (even when you use dplyr to parse some of the
data, it can get a little overwhelming. While the data visualilzations does not include functionality to
compare countries in terms of greenhouse gas emissions, it still helps to provide a visual illustration
of the data")
)
)
)
#Chart 2 Page
ChartPage2 <- tabPanel(
"Visual Chart 2",
sidebarLayout(
sidebarPanel(
p("Select your viewing options!"),
selectInput("county_id",
label = h3("County"),
choices = fires$Counties,
selected = "Los Angeles"
),
selectInput("color_id2",
label = h3("Color"),
choices = brewer.pal(8, "Set2")
)
),
mainPanel(
h2("Finding the average number of acres burned per year by wildfires"),
p("Below is my interactive visualization showing the total greenhouse gas emissions for each country"),
plotlyOutput(outputId = "avg_acres_burned"),
p("The reason why I chose to include this chart was to provide an individualized snapshot of each country's
greenhouse gas emissions. Compared to the large data chart (even when you use dplyr to parse some of the
data, it can get a little overwhelming. While the data visualilzations does not include functionality to
compare countries in terms of greenhouse gas emissions, it still helps to provide a visual illustration
of the data")
)
)
)
#Chart 3 Page
ChartPage3 <- tabPanel(
"Visual Chart 3",
sidebarLayout(
sidebarPanel(
p("Select your viewing options!"),
selectInput("num_fires_year_id",
label = h3("Year"),
choices = fires$ArchiveYear,
selected = "2013"
),
selectInput("color_id3",
label = h3("Color"),
choices = brewer.pal(8, "Set2")
)
),
mainPanel(
h2("Finding the total number of fires per year based on counties"),
p("Below is my interactive visualization showing the total greenhouse gas emissions for each country"),
plotlyOutput(outputId = "total_num_fires"),
p("The reason why I chose to include this chart was to provide an individualized snapshot of each country's
greenhouse gas emissions. Compared to the large data chart (even when you use dplyr to parse some of the
data, it can get a little overwhelming. While the data visualilzations does not include functionality to
compare countries in terms of greenhouse gas emissions, it still helps to provide a visual illustration
of the data")
)
)
)
#Summary Page
SummaryPage <- tabPanel(
"Summary Takeaways",
mainPanel(
h1("Summary"),
p("Welcome to my assignment 4! For my assignment, I have chosen to track the variables of greenhouse gases,
coal, and CO2 using a data set compiled by Our World in Data (link below). Through working with
the data, I have looked to find relevant values and trends within the data that will allow me
to put together a greater picture about climate change over time, and how differnet countries
(my work focuses on the USA), has impacted climate change throughout history."),
p(a("Our World in Data", href = "https://ourworldindata.org/co2-and-other-greenhouse-gas-emissions")),
p(strong("Below are 5 relevant data points about climate change that I calculated
using the raw data compiled by Our World in Data:")),
p("The difference between the USA CO2 emissions from coal in the years 2000 and 2010 was 159.117 million tonnes"),
p("The year where the USA's share of global CO2 emissions was the greatest was in 2000"),
p("In the most recent documented year for this metric (2014), the USA's greenhouse gas
emissions per capita was 19.135 tonnes"),
p("After charging the USA's greenhouse gas emissions each year, I found that the greatest emissions
came in 2007, at 6601.13 million tonnes of carbon dioxide equivalents."),
p("In 1990, the United States had the greatest cumulative share of global CO2 emissions at 30.716% of global emissions.
This emissions number was also the greatest cumulative share of global CO2 emissions within the entire datset.")
))
#Fluid Page Code
ui <- fluidPage(
h1("INFO 201 Final Deliverable: California Forest Fires"),
h2("Created by Andrew Wong, Kyle Tsang, Ibrahim Yusef, Daniel Miau"),
navbarPage(
inverse = TRUE,
"California Forest Fires",
Introduction,
ChartPage1,
ChartPage2,
ChartPage3,
SummaryPage
)
)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
server <- function(input, output) {
output$fires_per_month <- renderPlotly({
fires_per_month_updated <- fires_per_month %>%
filter(ArchiveYear == input$fires_year_id)
chart1 <- ggplot(data = fires_per_month_updated) +
geom_col(mapping = aes(x = Month, y = num_fires_per_month),
fill = input$color_id) +
labs(title = "Number of Fires Per Month Each Year (2013-2018)",
x = "Month", y = "Number of Fires")
})
output$avg_acres_burned <- renderPlotly ({
avg_acres_burned_updated <- avg_acres_burned %>%
filter(Counties == input$county_id)
chart2 <- ggplot(data = avg_acres_burned_updated) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres),
color = input$color_id2) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres")
})
output$total_num_fires<- renderPlotly ({
total_num_fires_updated <- total_num_fires %>%
filter(ArchiveYear == input$num_fires_year_id)
chart3 <- ggplot(data = total_num_fires_updated) +
geom_col(mapping = aes(x = ArchiveYear, y = total_num_per_year),
fill = input$color_id3) +
labs(
title = "Total Number of Fires Each Year (2013-2018)",
x = "Year",
y = "Number of Fires"
)
})
}
server <- function(input, output) {
output$fires_per_month <- renderPlotly({
fires_per_month_updated <- fires_per_month %>%
filter(ArchiveYear == input$fires_year_id)
chart1 <- ggplot(data = fires_per_month_updated) +
geom_col(mapping = aes(x = Month, y = num_fires_per_month),
fill = input$color_id) +
labs(title = "Number of Fires Per Month Each Year (2013-2018)",
x = "Month", y = "Number of Fires")
})
output$avg_acres_burned <- renderPlotly ({
avg_acres_burned_updated <- avg_acres_burned %>%
filter(Counties == input$county_id)
chart2 <- ggplot(data = avg_acres_burned_updated) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres),
color = input$color_id2) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres")
})
output$total_num_fires<- renderPlotly ({
total_num_fires_updated <- total_num_fires %>%
filter(ArchiveYear == input$num_fires_year_id)
chart3 <- ggplot(data = total_num_fires_updated) +
geom_col(mapping = aes(x = ArchiveYear, y = total_num_per_year),
fill = input$color_id3) +
labs(
title = "Total Number of Fires Each Year (2013-2018)",
x = "Year",
y = "Number of Fires"
)
})
}
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
server <- function(input, output) {
output$fires_per_month <- renderPlotly({
fires_per_month_updated <- fires_per_month %>%
filter(ArchiveYear == input$fires_year_id)
chart1 <- ggplot(data = fires_per_month_updated) +
geom_col(mapping = aes(x = Month, y = num_fires_per_month),
fill = input$color_id) +
labs(title = "Number of Fires Per Month Each Year (2013-2018)",
x = "Month", y = "Number of Fires")
})
output$avg_acres_burned <- renderPlotly ({
avg_acres_burned_updated <- avg_acres_burned %>%
filter(Counties == input$county_id)
chart2 <- ggplot(data = avg_acres_burned_updated) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres),
color = input$color_id2) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres")
})
output$total_num_fires<- renderPlotly ({
total_num_fires_updated <- total_num_fires %>%
filter(Counties == input$num_fires_county_id)
chart3 <- ggplot(data = total_num_fires_updated) +
geom_col(mapping = aes(x = ArchiveYear, y = total_num_per_year),
fill = input$color_id3) +
labs(
title = "Total Number of Fires Each Year (2013-2018)",
x = "Year",
y = "Number of Fires"
)
})
}
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(theme = shinytheme("united"),
h1("INFO 201 Final Deliverable: California Forest Fires"),
h2("Created by Andrew Wong, Kyle Tsang, Ibrahim Yusef, Daniel Miau"),
navbarPage(
inverse = TRUE,
"California Forest Fires",
Introduction,
ChartPage1,
ChartPage2,
ChartPage3,
SummaryPage
)
)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
ui <- fluidPage(theme = shinytheme("cyborg"),
h1("INFO 201 Final Deliverable: California Forest Fires"),
h2("Created by Andrew Wong, Kyle Tsang, Ibrahim Yusef, Daniel Miau"),
navbarPage(
inverse = TRUE,
"California Forest Fires",
Introduction,
ChartPage1,
ChartPage2,
ChartPage3,
SummaryPage
)
)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
chart2 <- ggplot(data = avg_acres_burned) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres), color = Counties) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres"
)
print(chart2)
chart2 <- ggplot(data = avg_acres_burned) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres), fill = Counties) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres"
)
print(chart2)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
avg_acres_burned <- fires %>%
group_by(ArchiveYear, Counties) %>%
summarize(avg_acres = round(mean(AcresBurned, na.rm = TRUE)))
chart2 <- ggplot(data = avg_acres_burned) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres), fill = Counties) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres"
)
print(chart2)
chart2 <- ggplot(data = avg_acres_burned) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres, fill = Counties)) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres"
)
print(chart2)
avg_acres_burned <- fires %>%
group_by(ArchiveYear, Counties) %>%
summarize(avg_acres = round(mean(AcresBurned, na.rm = TRUE)))
chart2 <- ggplot(data = avg_acres_burned) +
geom_line(mapping = aes(x = ArchiveYear, y = avg_acres, color = Counties)) +
labs(
title = "Average Acres Burned Each Year (2013-2018)",
x = "Year",
y = "Average Acres"
)
print(chart2)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
ui <- fluidPage(theme = shinytheme("cerulean"),
h3("INFO 201 Final Deliverable: California Forest Fires"),
h3("Created by Andrew Wong, Kyle Tsang, Ibrahim Yusef, Daniel Miau"),
navbarPage(
inverse = TRUE,
"California Forest Fires",
Introduction,
ChartPage1,
ChartPage2,
ChartPage3,
SummaryPage
)
)
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
shiny::runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
runApp('C:/Users/danie/Desktop/info_201/INFO-201-Forest-Fire-Project-/Final Deliverable/app')
setwd("C:/Users/danie/Desktop/INFO 478/workbook-3-dmiau88")
# Set up - make sure to set your working directory using RStudio
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggplot2)
# Create the `charts/` directory (you can do this from R!)
dir.create("charts", showWarnings = FALSE)
setwd("C:/Users/danie/Desktop/INFO 478/workbook-3-dmiau88")
# Set up - make sure to set your working directory using RStudio
library(tidyr)
library(dplyr)
library(readxl)
# Load HALE data
hale <- read.csv("./data/raw/hale.csv", stringsAsFactors = FALSE) %>%
rename(hale = val) %>%
select(location_id, year, hale)
# Load life expectancy data
life_expectancy <- read.csv(
"./data/raw/life_expectancy.csv",
stringsAsFactors = FALSE
) %>%
rename(le = val) %>%
select(location_id, year, le)
# Load DALY data
dalys <- read.csv("./data/raw/dalys.csv", stringsAsFactors = FALSE) %>%
rename(dalys = val) %>%
select(location_id, year, dalys)
# Join data
all_data <- life_expectancy %>%
left_join(hale, by = c("year", "location_id")) %>%
left_join(dalys, by = c("year", "location_id"))
# Load hierarchy of locations (to exclude estimates at aggregate levels)
location_hierarchy <- read_excel("./data/raw/location_hierarchy.XLSX") %>%
filter(level == 3) %>% # only country level
select(location_id, location_name)
# Merge data, exclude aggregate locations
prepped <- left_join(location_hierarchy, all_data, by = "location_id") %>%
select(location_name, year, hale, le, dalys)
# Create `data/prepped/` folder
dir.create("data/prepped", showWarnings = FALSE)
# Write data
write.csv(prepped, "./data/prepped/all_data.csv", row.names = FALSE)
# Create the `charts/` directory (you can do this from R!)
dir.create("charts", showWarnings = FALSE)
# Load prepped data
health_data <- read.csv("./data/prepped/all_data.csv")
View(health_data    )
data_2016 <- health_data %>%
filter(year == 2016)
View(data_2016)
data_2016 <- health_data %>%
filter(year == 2016)
ggplot(data_2016) +
geom_point(mapping = aes(x = le, y = hale)) +
labs(
title = "Life Expectancy vs HALE",
x = "Life Expectancy",
y = "HALE"
)
cor(data_2016$hale, data_2016$le)
ggplot(data_2016) +
geom_point(mapping = aes(x = le, y = hale)) +
labs(
title = "Life Expectancy vs HALE",
x = "Life Expectancy",
y = "HALE"
)
ggsave("charts/le_hale_graph.png")
ggplot(data_2016) +
geom_point(mapping = aes(x = hale, y = dalys)) +
labs(
title = "HALE vs DALYS",
x = "HALE",
y = "DALYS"
)
ggsave("chars/hale_dalys_graph.png")
cor(data_2016$hale, data_2016$dalys)
ggplot(data_2016) +
geom_point(mapping = aes(x = dalys, y = hale)) +
labs(
title = "HALE vs DALYS",
x = "DALYS",
y = "HALE"
)
ggsave("chars/hale_dalys_graph.png")
cor(data_2016$hale, data_2016$dalys)
ggplot(data_2016) +
geom_point(mapping = aes(x = dalys, y = hale)) +
labs(
title = "HALE vs DALYS",
x = "DALYS",
y = "HALE"
)
ggsave("charts/hale_dalys_graph.png")
cor(data_2016$hale, data_2016$dalys)
data_wide <- health_data %>%
pivot_wider(names_from = year,
values_from = c(hale, le, dalys))
View(data_wide)
data_wide <- data_wide %>%
mutate(hale_diff = hale_2016 - hale_1990,
le_diff = le_2016 - le_1990)
ggplot(data_wide) +
geom_point(mapping = aes(x = le_diff, y = hale_diff)) +
labs(
title = "Life Expectancy difference vs HALE difference",
x = "Change in Life Expectancy",
y = "Change in HALE") +
geom_abline(intercept = 0, slope = 1)
ggplot(data_wide) +
geom_point(mapping = aes(x = le_diff, y = hale_diff)) +
labs(
title = "Life Expectancy difference vs HALE difference",
x = "Change in Life Expectancy",
y = "Change in HALE") +
geom_abline(intercept = 0, slope = 1) +
xlim(-15, 20) +
ylim(-15, 20)
ggsave("charts/change_plot.png")
